#!/bin/bash
# Brendan Szymanski, bscubed@pm.me
# A simple script to update maintained packages in the arch user repository,
# check for errors, and if no errors occur, upload changes to the arch
# user repository.

exec 3>&1 2>&1

TOOL_NAME=devtest
CONFIG_DIR=${XDG_CONFIG_HOME:-$HOME/.config}/$TOOL_NAME
CONFIG_FILE=$CONFIG_DIR/config
DATA_DIR=${XDG_DATA_HOME:-$HOME/.local/share}/$TOOL_NAME
LOG_DIR=$DATA_DIR/logs
LOG_FILE=$LOG_DIR/`date +"%Y-%m-%d-%T"`.log

VERBOSE=false
CHROOT_DIR=$DATA_DIR/chroot
CCACHE_ENABLED=false
CCACHE_DIRECTORY=$HOME/.ccache
PACKAGES=()
PACKAGE_DIR=$DATA_DIR/packages
OUTPUT_DIR=$DATA_DIR/output
CUSTOM_PACMAN_CONF=$DATA_DIR/pacman.conf
CUSTOM_MAKEPKG_CONF=$DATA_DIR/makepkg.conf
CLEAN=false
ASK_TO_UPLOAD=false
ASK_TO_INSTALL=false
EXIT_ON_FAILURE=false

UPLOAD=false
INSTALL=false
COMMIT_MESSAGE=""
UPLOAD_FAILED=()
UPLOAD_SUCCESS=()
BUILD_FAILED=()
BUILD_SUCCESS=()
DEPENDENCIES=("devtools" "ccache")

setup() {
    if [ ! -d $CONFIG_DIR ]; then
        log "Creating config directory at $CONFIG_DIR"
        mkdir -p $CONFIG_DIR
    fi
    
    if [ ! -f $CONFIG_FILE ]; then
        log "Creating config file at $CONFIG_FILE"
cat <<EOF > $CONFIG_FILE
# Packages to build when the script is run without any options
# Example: PACKAGES=("devtest" "yuzu-mainline-git" "citra-canary-git")
PACKAGES=()

# Changes the default directory where PKGBUILDs are stored and built
#PACKAGE_DIR=$PACKAGE_DIR

# Changes the default directory where built packages are stored
#OUTPUT_DIR=$OUTPUT_DIR

# Changes the default directory where the Arch chroot is created
#CHROOT_DIR=$CHROOT_DIR

# pacman configuration file to be used by the Arch chroot. If this file does not exist,
# /etc/pacman.conf will be used instead.
# Any changes to this file will require you to delete the chroot directory so it can be rebuilt.
CUSTOM_PACMAN_CONF=$CUSTOM_PACMAN_CONF

# makepkg configuration file to be used by the Arch chroot. If this file does not exist,
# /etc/makepkg.conf will be used instead.
# Any changes to this file will require you to delete the chroot directory so it can be rebuilt.
CUSTOM_MAKEPKG_CONF=$CUSTOM_MAKEPKG_CONF

# Uncomment to enable ccache (requires ccache to be installed and configured)
# If ccache is not enabled in /etc/makepkg.conf or in CUSTOM_MAKEPKG_CONF
# this will not work. https://wiki.archlinux.org/index.php/Ccache#Enable_ccache_for_makepkg
#CCACHE_ENABLED=$CCACHE_ENABLED

# Uncomment this line if you'd like to store build cache in a custom directory
#CCACHE_DIRECTORY=$CCACHE_DIRECTORY

# Whether or not to clean build directories after successful builds
#CLEAN=$CLEAN

# If true, a prompt will appear after a successful build asking whether or not to upload
# changes to the AUR.
# NOTE: This option is only for AUR maintainers with correct SSH keys configured.
#ASK_TO_UPLOAD=$ASK_TO_UPLOAD

# If set to true, after a successful build a prompt will appear asking whether or not
# to install the built package.
#ASK_TO_INSTALL=$ASK_TO_INSTALL

# If true, the script will not build any other packages after a build failure occurs.
#EXIT_ON_FAILURE=$EXIT_ON_FAILURE
EOF
    fi
    
    # Gets configuration settings from config file
    source $CONFIG_FILE
    
    if [ ! -d $DATA_DIR ]; then
        log "Creating data directory at $DATA_DIR"
        mkdir -p $DATA_DIR
    fi
    
    if [ ! -d $LOG_DIR ]; then
        log "Creating log directory at $LOG_DIR"
        mkdir -p $LOG_DIR
    fi
}

update_chroot() {
    if [ -d $CHROOT_DIR/root ]; then
        echo "Updating arch chroot system in $CHROOT_DIR/" | tee /dev/fd/3
        arch-nspawn $CHROOT_DIR/root pacman -Syu --noconfirm | tee /dev/fd/3
    else
        echo "Creating new arch chroot system in $CHROOT_DIR/" | tee /dev/fd/3
        mkdir -p $CHROOT_DIR
        
        flags=()
        
        if [ ! -f $CUSTOM_PACMAN_CONF ]; then
            log "$CUSTOM_PACMAN_CONF not found. Using /etc/pacman.conf instead"
        else
            log "Using $CUSTOM_PACMAN_CONF for the new chroot configuration."
            flags+=("-C $CUSTOM_PACMAN_CONF")
        fi
        
        if [ ! -f $CUSTOM_MAKEPKG_CONF ]; then
            log "$CUSTOM_MAKEPKG_CONF not found. Using /etc/makepkg.conf instead"
        else
            log "Using $CUSTOM_MAKEPKG_CONF for the new chroot configuration."
            flags+=("-M $CUSTOM_MAKEPKG_CONF")
        fi
        
        mkarchroot ${flags[*]} $CHROOT_DIR/root base base-devel linux | tee /dev/fd/3
        
        if $CCACHE_ENABLED; then
            echo "Installing ccache on the chroot system" | tee /dev/fd/3
            arch-nspawn $CHROOT_DIR/root pacman -S ccache --noconfirm | tee /dev/fd/3
            if [ ! -d $CHROOT_DIR/ccache ]; then
                log "Creating chroot ccache directory"
                mkdir -p $CHROOT_DIR/ccache
            fi
        fi
    fi
}

update_package() {
    if $CCACHE_ENABLED; then
        makechrootpkg -c -d $CCACHE_DIRECTORY/:/ccache -r $CHROOT_DIR -- CCACHE_DIR=/ccache | tee /dev/fd/3
    else
        makechrootpkg -c -r $CHROOT_DIR | tee /dev/fd/3
    fi
}

backup() {
    log "Backing up `echo $1*.pkg.tar*` to $OUTPUT_DIR/$1/"
    mkdir -p $OUTPUT_DIR/$1
    mv -f $1*.pkg.tar* $OUTPUT_DIR/$1/
}

upload() {
    makepkg --printsrcinfo > .SRCINFO
    git add -u
    git commit -m $1
    git push
}

start() {
    # Log stdout and stderr to a log file.
    exec 3>&1 1>>$LOG_FILE 2>&1

    log "PACKAGES: ${PACKAGES[*]}"

    update_chroot
    for i in "${PACKAGES[@]}" ; do
        echo "Building $i..." | tee /dev/fd/3
        
        # Download PKGBUILD if it doesn't exist
        if [[ ! -d $PACKAGE_DIR/$i ]] || [[ ! -f $PACKAGE_DIR/$i/PKGBUILD ]]; then
            mkdir -p $PACKAGE_DIR/$i
            git clone ssh://aur@aur.archlinux.org/$i.git $PACKAGE_DIR/$i
        fi
        
        cd $PACKAGE_DIR/$i
        if update_package ; then
            # Build successful!
            echo "Package \"$i\" built successfully" | tee /dev/fd/3
            BUILD_SUCCESS+=($i)
            
            if [[ $INSTALL == true ]]; then
                sudo pacman -U --noconfirm $i*.pkg.tar* 1>&3
            elif [[ $ASK_TO_INSTALL == true ]]; then
                while true; do
                    printf "Would you like to install $i? [Y/n] " 1>&3
                    read input
                    case $input in
                        y|Y|"" )
                            sudo pacman -U --noconfirm $i*.pkg.tar* | tee /dev/fd/3
                            break
                            ;;
                        n|N )
                            break
                            ;;
                        * )
                            echo "Invalid input. Try again" | tee /dev/fd/3
                    esac
                done
            fi
            
            backup $i
            
            if $CLEAN; then
                log "Cleaning build directory..."
                # Deletes all untracked files and folders in the working tree
                git clean -fd
            fi
            
            if $ASK_TO_UPLOAD ; then
                while true; do
                    printf "Upload package changes to the AUR? [y/N] " 1>&3
                    read input
                    case $input in
                        n|N|"" )
                            UPLOAD=false
                            break
                            ;;
                        y|Y )
                            UPLOAD=true
                            break
                            ;;
                        * )
                            echo "Invalid input. Try again" 1>&3;;
                    esac
                done
            fi
            
            if $UPLOAD; then
                # Prompt user for commit message
                while true; do
                    printf "Commit message: " 1>&3
                    read input
                    case $input in
                        ""|" " )
                            echo "Message cannot be blank. Please enter a valid commit message" 1>&3;;
                        * )
                            COMMIT_MESSAGE="$input"
                            break
                            ;;
                    esac
                done
                
                # Attempt to upload packages to the AUR
                if upload $COMMIT_MESSAGE; then
                    echo "Successfully uploaded $i." | tee /dev/fd/3
                    UPLOAD_SUCCESS+=($i)
                else
                    echo "Failed to upload package to AUR. Ensure the correct SSH keys are properly configured." | tee /dev/fd/3
                    echo "See https://wiki.archlinux.org/index.php/AUR_submission_guidelines#Authentication for details." | tee /dev/fd/3
                    UPLOAD_FAILED+=($i);
                fi
            fi
        else
            echo "Package build failed. See log at $LOG_FILE for details" | tee /dev/fd/3
            BUILD_FAILED+=($i);
            
            if $EXIT_ON_FAILURE; then
                break
            fi
        fi
        cd ..
    done
    
    if [ ${#BUILD_SUCCESS[@]} -gt 0 ]; then
        echo "The following packages were built successfully: ${BUILD_SUCCESS[*]}" | tee /dev/fd/3
    fi
    
    if [ ${#UPLOAD_SUCCESS[@]} -gt 0 ]; then
        echo "The following packages were uploaded successfully: ${UPLOAD_SUCCESS[*]}" | tee /dev/fd/3
    fi
    
    if [ ${#BUILD_FAILED[@]} -gt 0 ]; then
        echo "The following packages failed to build: ${BUILD_FAILED[*]}" | tee /dev/fd/3
    fi
    
    if [ ${#UPLOAD_FAILED[@]} -gt 0 ]; then
        echo "The following packages failed to upload: ${UPLOAD_FAILED[*]}" | tee /dev/fd/3
    fi
}

log() {
    echo $1 1>&2
}

setup

packages=()

while getopts ":m:p:hvucRri" opt; do
    case ${opt} in
        h )
            echo "This scripts builds packages from the AUR in a clean sandboxed" 1>&3
            echo "chroot to test for errors and missing dependencies." 1>&3
            echo "After building packages, this script can optionally upload" 1>&3
            echo "the updated PKGBUILD to the AUR automatically." 1>&3
            echo 1>&3
            echo "Usage: update-packages" 1>&3
            echo "Usage: update-packages [options]" 1>&3
            echo 1>&3
            echo "Options:" 1>&3
            echo "  -h             Prints usage information" 1>&3
            echo "  -v             Runs in verbose output mode for debugging purposes" 1>&3
            echo "  -u             Upload package(s) to the AUR" 1>&3
            echo "  -i             Install package(s) after a successful build" 1>&3
            echo "  -c             Clean build directories after successful build" 1>&3
            echo "  -R             Rebuild chroot system and exit" 1>&3
            echo "  -r             Rebuild chroot system and build packages" 1>&3
            echo "  -m <message>   Commit message when git pushing to the AUR repo" 1>&3
            echo "  -p <package>   Specific package to build" 1>&3
            echo 1>&3
            echo "If no arguments are provided, all packages will be built, but" 1>&3
            echo "none will be uploaded" 1>&3
            exit 0
            ;;
        u )
            UPLOAD=true
            ;;
        v )
            VERBOSE=true
            ;;
        c )
            CLEAN=true
            ;;
        i )
            INSTALL=true
            ;;
        R )
            sudo rm -rf $CHROOT_DIR
            update_chroot
            exit 0
            ;;
        r )
            sudo rm -rf $CHROOT_DIR
            ;;
        m )
            COMMIT_MESSAGE="$OPTARG"
            ;;
        p )
            packages+=("$OPTARG")
            ;;
        \? )
            echo "Invalid option: $OPTARG" 1>&3
            exit 1
            ;;
        : )
            echo "Invalid option: $OPTARG requires an argument" 1>&3
            exit 1
            ;;
    esac
done
shift $((OPTIND -1))

# If user specified packages to build, build those; otherwise build the default packages
if [ ${#packages[@]} -gt 0 ]; then
    PACKAGES=("${packages[@]}")
fi

if [ ${#PACKAGES[@]} -eq 0 ]; then
    echo "No packages specified. Please specify packages to build with the -p flag or save default packages in $CONFIG_FILE." 1>&3
    exit 1
fi

for i in "${DEPENDENCIES[@]}" ; do
    if ! pacman -Qs $i > /dev/null ; then
        while true; do
            printf "Required dependency $i is not installed. Install it now? [Y/n] " 1>&3
            read input
            case $input in
                n|N )
                    exit
                    ;;
                y|Y|"" )
                    sudo pacman -S $i --noconfirm
                    break
                    ;;
                * )
                    echo "Invalid input. Try again" 1>&3;;
            esac
        done
    fi
done

start
