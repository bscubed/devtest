#!/bin/bash

# Brendan Szymanski, bscubed@pm.me
# A simple tool to update maintained packages in the arch user repository, check
# for errors, and if no errors occur, upload changes to the arch user repository

TOOL_NAME=devtest
VERSION=1.0.1
CONFIG_DIR=${XDG_CONFIG_HOME:-$HOME/.config}/$TOOL_NAME
CONFIG_FILE=$CONFIG_DIR/config
DATA_DIR=${XDG_DATA_HOME:-$HOME/.local/share}/$TOOL_NAME
LOG_DIR=$DATA_DIR/logs
LOG_FILE=$LOG_DIR/`date +"%Y-%m-%d-%T"`.log

VERBOSE=false
CHROOT_DIR=$DATA_DIR/chroot
CCACHE_ENABLED=false
CCACHE_DIRECTORY=$HOME/.ccache
PACKAGES=()
PACKAGE_DIR=$DATA_DIR/packages
OUTPUT_DIR=$DATA_DIR/output
CUSTOM_PACMAN_CONF=$DATA_DIR/pacman.conf
CUSTOM_MAKEPKG_CONF=$DATA_DIR/makepkg.conf
CLEAN=false
ASK_TO_UPLOAD=false
ASK_TO_INSTALL=false
EXIT_ON_FAILURE=false

UPLOAD=false
INSTALL=false
COMMIT_MESSAGE=""
UPLOAD_FAILED=()
UPLOAD_SUCCESS=()
BUILD_FAILED=()
BUILD_SUCCESS=()

setup() {
    if [ ! -d $CONFIG_DIR ]; then
        log "Creating config directory at $CONFIG_DIR"
        mkdir -p $CONFIG_DIR
    fi
    
    if [ ! -f $CONFIG_FILE ]; then
        log "Creating config file at $CONFIG_FILE"
cat <<EOF > $CONFIG_FILE
# Packages to build when the script is run without any options
# Example: PACKAGES=("package1" "package2" "package3")
PACKAGES=()

# Changes the default directory where PKGBUILDs are stored and built
PACKAGE_DIR=$PACKAGE_DIR

# Changes the default directory where built packages are stored
OUTPUT_DIR=$OUTPUT_DIR

# Changes the default directory where the Arch chroot is created
CHROOT_DIR=$CHROOT_DIR

# pacman configuration file to be used by the Arch chroot. If this file does not exist,
# /etc/pacman.conf will be used instead.
# Any changes to this file will require you to rebuild the chroot with "devtest --rebuild"
CUSTOM_PACMAN_CONF=$CUSTOM_PACMAN_CONF

# makepkg configuration file to be used by the Arch chroot. If this file does not exist,
# /etc/makepkg.conf will be used instead.
# Any changes to this file will require you to rebuild the chroot with "devtest --rebuild"
CUSTOM_MAKEPKG_CONF=$CUSTOM_MAKEPKG_CONF

# Enable ccache (requires ccache to be installed and configured)
# If ccache is not enabled in /etc/makepkg.conf or in CUSTOM_MAKEPKG_CONF
# this will not work. https://wiki.archlinux.org/index.php/Ccache#Enable_ccache_for_makepkg
# Changes to this setting will require you to rebuild the chroot with "devtest --rebuild"
CCACHE_ENABLED=$CCACHE_ENABLED

# Specifies the directory to store build cache if ccache is enabled.
# Note: Not recommended if you build this package often locally.
CCACHE_DIRECTORY=$CCACHE_DIRECTORY

# Whether or not to clean build directories after successful builds.
CLEAN=$CLEAN

# If true, a prompt will appear after a successful build asking whether or not to upload
# changes to the AUR.
# NOTE: This option is only for AUR maintainers with correct SSH keys configured.
# https://wiki.archlinux.org/index.php/AUR_submission_guidelines#Authentication
ASK_TO_UPLOAD=$ASK_TO_UPLOAD

# If set to true, after a successful build a prompt will appear asking whether or not
# to install the built package.
ASK_TO_INSTALL=$ASK_TO_INSTALL

# If true, no other packages will be built after a build failure occurs.
EXIT_ON_FAILURE=$EXIT_ON_FAILURE
EOF
    fi
    
    # Gets configuration settings from config file
    source $CONFIG_FILE
    
    if [ ! -d $DATA_DIR ]; then
        log "Creating data directory at $DATA_DIR"
        mkdir -p $DATA_DIR
    fi
    
    if [ ! -d $LOG_DIR ]; then
        log "Creating log directory at $LOG_DIR"
        mkdir -p $LOG_DIR
    fi
}

update_chroot() {
    if [ -d $CHROOT_DIR/root ]; then
        echo -ne "\033]0;Updating chroot...\007"
        echo "Updating arch chroot system in $CHROOT_DIR/"
        arch-nspawn $CHROOT_DIR/root pacman -Syu --noconfirm
    else
        echo -ne "\033]0;Creating chroot...\007"
        echo "Creating new arch chroot system in $CHROOT_DIR/"
        mkdir -p $CHROOT_DIR
        
        flags=()
        
        if [ ! -f $CUSTOM_PACMAN_CONF ]; then
            log "$CUSTOM_PACMAN_CONF not found. Using /etc/pacman.conf instead"
        else
            log "Using $CUSTOM_PACMAN_CONF for the new chroot configuration."
            flags+=("-C $CUSTOM_PACMAN_CONF")
        fi
        
        if [ ! -f $CUSTOM_MAKEPKG_CONF ]; then
            log "$CUSTOM_MAKEPKG_CONF not found. Using /etc/makepkg.conf instead"
        else
            log "Using $CUSTOM_MAKEPKG_CONF for the new chroot configuration."
            flags+=("-M $CUSTOM_MAKEPKG_CONF")
        fi
        
        mkarchroot ${flags[*]} $CHROOT_DIR/root base base-devel linux
        
        if $CCACHE_ENABLED; then
            echo "Installing ccache on the chroot system"
            arch-nspawn $CHROOT_DIR/root pacman -S ccache --noconfirm
            if [ ! -d $CHROOT_DIR/ccache ]; then
                log "Creating chroot ccache directory"
                mkdir -p $CHROOT_DIR/ccache
            fi
        fi
    fi
}

update_package() {
    if $CCACHE_ENABLED; then
        makechrootpkg -c -d $CCACHE_DIRECTORY/:/ccache -r $CHROOT_DIR -- CCACHE_DIR=/ccache
    else
        makechrootpkg -c -r $CHROOT_DIR
    fi
}

backup() {
    echo "Backing up `echo $1*.pkg.tar*` to $OUTPUT_DIR/$1/"
    mkdir -p $OUTPUT_DIR/$1
    mv -f $1*.pkg.tar* $OUTPUT_DIR/$1/
}

upload() {
    makepkg --printsrcinfo > .SRCINFO
    git add -u
    git commit -m $1
    git push
}

start() {
    log "PACKAGES: ${PACKAGES[*]}"

    update_chroot
    for i in "${PACKAGES[@]}" ; do
        echo -ne "\033]0;Building $i...\007"
        echo "Building $i..."
        
        # Download PKGBUILD if it doesn't exist
        if [[ ! -d $PACKAGE_DIR/$i ]] || [[ ! -f $PACKAGE_DIR/$i/PKGBUILD ]]; then
            mkdir -p $PACKAGE_DIR/$i
            git clone ssh://aur@aur.archlinux.org/$i.git $PACKAGE_DIR/$i
        fi
        
        cd $PACKAGE_DIR/$i
        if update_package ; then
            # Build successful!
            echo "Package \"$i\" built successfully"
            BUILD_SUCCESS+=($i)
            
            if [[ $INSTALL == true ]]; then
                echo -ne "\033]0;Installing $i...\007"
                sudo pacman -U --noconfirm $i*.pkg.tar*
            elif [[ $ASK_TO_INSTALL == true ]]; then
                echo -ne "\033]0;Installing $i...\007"
                while true; do
                    printf "Would you like to install $i? [Y/n] "
                    read input
                    case $input in
                        y|Y|"" )
                            sudo pacman -U --noconfirm $i*.pkg.tar*
                            break
                            ;;
                        n|N )
                            break
                            ;;
                        * )
                            echo "Invalid input. Try again"
                    esac
                done
            fi
            
            backup $i
            
            if $CLEAN; then
                log "Cleaning build directory..."
                # Deletes all untracked files and folders in the working tree
                git clean -fd
            fi
            
            if $ASK_TO_UPLOAD ; then
                while true; do
                    printf "Upload package changes to the AUR? [y/N] "
                    read input
                    case $input in
                        n|N|"" )
                            UPLOAD=false
                            break
                            ;;
                        y|Y )
                            UPLOAD=true
                            break
                            ;;
                        * )
                            echo "Invalid input. Try again";;
                    esac
                done
            fi
            
            if $UPLOAD; then
                echo -ne "\033]0;Updating $i PKGBUILD...\007"
                # Prompt user for commit message
                while true; do
                    printf "Commit message: "
                    read input
                    case $input in
                        ""|" " )
                            echo "Message cannot be blank. Please enter a valid commit message";;
                        * )
                            COMMIT_MESSAGE="$input"
                            break
                            ;;
                    esac
                done
                
                # Attempt to upload packages to the AUR
                if upload $COMMIT_MESSAGE; then
                    echo "Successfully uploaded $i."
                    UPLOAD_SUCCESS+=($i)
                else
                    echo "Failed to upload package to AUR. Ensure the correct SSH keys are properly configured."
                    echo "See https://wiki.archlinux.org/index.php/AUR_submission_guidelines#Authentication for details."
                    UPLOAD_FAILED+=($i);
                fi
            fi
        else
            echo "Package build failed. See log at $LOG_FILE for details"
            BUILD_FAILED+=($i);
            
            if $EXIT_ON_FAILURE; then
                break
            fi
        fi
        cd ..
    done
    
    if [ ${#BUILD_SUCCESS[@]} -gt 0 ]; then
        echo "The following packages were built successfully: ${BUILD_SUCCESS[*]}"
    fi
    
    if [ ${#UPLOAD_SUCCESS[@]} -gt 0 ]; then
        echo "The following packages were uploaded successfully: ${UPLOAD_SUCCESS[*]}"
    fi
    
    if [ ${#BUILD_FAILED[@]} -gt 0 ]; then
        echo "The following packages failed to build: ${BUILD_FAILED[*]}"
    fi
    
    if [ ${#UPLOAD_FAILED[@]} -gt 0 ]; then
        echo "The following packages failed to upload: ${UPLOAD_FAILED[*]}"
    fi
}

log() {
    if $VERBOSE ; then
        echo $1
    fi
}

show_help() {
    echo "This tool helps manage, test, and update multiple AUR packages in a"
    echo "project-like structure."
    echo "All packages are built in a completely clean chroot environment to"
    echo "test for errors and missing dependencies."
    echo "If configured, this tool can also upload PKGBUILD changes to the AUR"
    echo "automatically after a successful build."
    echo
    echo "The project directory directory is located in"
    echo "$PACKAGE_DIR and packages downloaded from git"
    echo "will be stored there."
    echo
    echo "Usage: $TOOL_NAME [options]"
    echo "Usage: $TOOL_NAME [options] <package(s)>"
    echo
    echo "Options:"
    echo "  -h, --help      Displays usage information"
    echo "  -v, --version   Displays $TOOL_NAME version"
    echo "  -V, --verbose   Runs in verbose output mode for debugging purposes"
    echo "  -u, --upload    Upload package(s) to the AUR"
    echo "  -i, --install   Install package(s) after a successful build"
    echo "  -c, --clean     Clean build directories after successful build"
    echo "  -R, --rebuild   Rebuild chroot system and exit"
    echo
}

show_version() {
    echo "$TOOL_NAME $VERSION"
}

setup

packages=()

options=$(getopt -o "hVucRiv" -l "help,verbose,upload,clean,rebuild,install,version" -a -- "$@")

# If getopt returns a non-zero code, exit the program.
if [ $? -ne 0 ]; then
    exit $?
fi

eval set -- "$options"

while true; do
    case $1 in
        -h|--help)
            show_help
            exit 0 ;;
        -v|--version)
            show_version
            exit 0 ;;
        -u|--upload)
            UPLOAD=true ;;
        -i|--install)
            INSTALL=true ;;
        -V|--verbose)
            VERBOSE=true ;;
        -c|--clean)
            CLEAN=true ;;
        -R|--rebuild)
            sudo rm -rf $CHROOT_DIR
            update_chroot
            exit 0 ;;
        --)
            shift
            if [ $# -gt 0 ]; then
                PACKAGES=("$@")
            fi
            break ;;
    esac
    shift
done

if [ ${#PACKAGES[@]} -eq 0 ]; then
    echo "No packages specified. Please specify packages to build \"$TOOL_NAME <package(s)>\" or save default packages in $CONFIG_FILE."
    exit 1
fi

start 2>&1 | tee $LOG_FILE
